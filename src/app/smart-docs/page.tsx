"use client";

import { useState } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { SmartDocsSchema, type SmartDocsInput } from '@/lib/schemas';
import { generateDocumentation, type GenerateDocumentationOutput } from '@/ai/flows/generate-documentation';
import { AppLayout } from '@/components/layout/app-layout';
import { PageHeader } from '@/components/layout/page-header';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';


export default function SmartDocsPage() {
  const [generatedDoc, setGeneratedDoc] = useState<GenerateDocumentationOutput | null>(null);
  const [editableDocText, setEditableDocText] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<SmartDocsInput>({
    resolver: zodResolver(SmartDocsSchema),
    defaultValues: {
      vin: '',
      trailerSpecs: '',
      documentType: 'NVIS', 
    },
  });

  const onSubmit: SubmitHandler<SmartDocsInput> = async (data) => {
    setIsLoading(true);
    setGeneratedDoc(null);
    try {
      const result = await generateDocumentation({
        vin: data.vin,
        trailerSpecs: data.trailerSpecs,
        documentType: data.documentType,
      });
      setGeneratedDoc(result);
      setEditableDocText(result.documentText);
      toast({
        title: `${data.documentType} Generated`,
        description: `The ${data.documentType.toLowerCase()} has been successfully generated by AI.`,
      });
    } catch (error) {
      console.error("Error generating documentation:", error);
      toast({
        title: "Error",
        description: "Failed to generate documentation. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setEditableDocText(e.target.value);
  };

  return (
    <AppLayout>
      <PageHeader 
        title="Smart Docs: NVIS & Bills of Sale"
        description="AI-powered generation of New Vehicle Information Statements (NVIS) and Bills of Sale."
      />
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="font-headline">Document Details</CardTitle>
            <CardDescription className="font-body">Select document type and enter details to generate.</CardDescription>
          </CardHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <CardContent className="space-y-4">
                <FormField
                  control={form.control}
                  name="documentType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="font-headline">Document Type</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger className="font-body">
                            <SelectValue placeholder="Select document type" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="NVIS" className="font-body">NVIS Certificate</SelectItem>
                          <SelectItem value="BillOfSale" className="font-body">Bill of Sale</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="vin"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="font-headline">Vehicle Identification Number (VIN)</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter 17-character VIN" {...field} className="font-body"/>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="trailerSpecs" 
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="font-headline">
                        {form.watch('documentType') === 'BillOfSale' ? 'Transaction & Vehicle Details' : 'Trailer Specifications'}
                      </FormLabel>
                      <FormControl>
                        <Textarea 
                          placeholder={
                            form.watch('documentType') === 'BillOfSale' 
                              ? "Buyer, Seller, Price, Vehicle details (Year, Make, Model), etc." 
                              : "Describe trailer model, features, capacity, GVWR, GAWR, etc."
                          } 
                          {...field} 
                          rows={5} 
                          className="font-body"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </CardContent>
              <CardFooter>
                <Button type="submit" disabled={isLoading} className="w-full">
                  {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                  Generate Document
                </Button>
              </CardFooter>
            </form>
          </Form>
        </Card>

        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="font-headline">Generated Document</CardTitle>
            <CardDescription className="font-body">Preview and edit the AI-generated document below.</CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading && (
              <div className="flex justify-center items-center h-40">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="ml-2 font-body">Generating document...</p>
              </div>
            )}
            {!isLoading && generatedDoc && (
              <Textarea
                value={editableDocText}
                onChange={handleTextChange}
                rows={15}
                className="font-body w-full p-2 border rounded-md"
                placeholder="Generated document will appear here..."
              />
            )}
            {!isLoading && !generatedDoc && (
              <div className="text-center text-muted-foreground font-body p-4 border border-dashed rounded-md h-60 flex items-center justify-center">
                Your generated document will appear here.
              </div>
            )}
          </CardContent>
          {generatedDoc && (
            <CardFooter>
               <Button variant="outline" className="w-full">
                Save / Download (Conceptual)
              </Button>
            </CardFooter>
          )}
        </Card>
      </div>
    </AppLayout>
  );
}
