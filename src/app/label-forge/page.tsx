
"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { LabelForgeSchema, type LabelForgeInput } from '@/lib/schemas';
import { createCompliantVinLabel, type CreateCompliantVinLabelOutput } from '@/ai/flows/create-compliant-vin-label';
import { AppLayout } from '@/components/layout/app-layout';
import { PageHeader } from '@/components/layout/page-header';
import { useToast } from '@/hooks/use-toast';
import LabelForgeForm from './components/LabelForgeForm';
import GeneratedLabel from './components/GeneratedLabel';

export default function LabelForgePage() {
  const [generatedLabel, setGeneratedLabel] = useState<CreateCompliantVinLabelOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<LabelForgeInput>({
    resolver: zodResolver(LabelForgeSchema),
    defaultValues: {
      vinData: '',
      trailerSpecs: '',
      regulatoryStandards: '',
      labelDimensions: '',
    },
  });

  const onSubmit = async (data: LabelForgeInput) => {
    setIsLoading(true);
    setGeneratedLabel(null);
    try {
      const result = await createCompliantVinLabel(data);
      setGeneratedLabel(result);
      toast({
        title: "Label Generated Successfully",
        description: "The VIN label has been designed and generated by AI.",
      });
    } catch (error) {
      console.error("Error generating label:", error);
      let errorMessage = "Failed to generate label. Please try again.";
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      toast({
        title: "Error Generating Label",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = () => {
    if (!generatedLabel || !generatedLabel.labelDataUri) return;

    const link = document.createElement('a');
    link.href = generatedLabel.labelDataUri;

    let extension = 'png';
    const dataUriPrefix = 'data:image/';
    if (generatedLabel.labelDataUri.startsWith(dataUriPrefix)) {
      const mimeTypePart = generatedLabel.labelDataUri.substring(
        dataUriPrefix.length,
        generatedLabel.labelDataUri.indexOf(';base64')
      );
      if (mimeTypePart) {
        extension = mimeTypePart.split('+')[0]; // Handles svg+xml
      }
    }
    
    link.download = `vin_label_${form.getValues('vinData') || 'generated'}.${extension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "Download Started", description: `Label ${link.download} download initiated.` });
  };

  return (
    <AppLayout>
      <PageHeader 
        title="Label Forge"
        description="AI-powered VIN label creation with optimized information placement."
      />
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <LabelForgeForm form={form} onSubmit={onSubmit} isLoading={isLoading} />
        <GeneratedLabel 
          generatedLabel={generatedLabel} 
          isLoading={isLoading} 
          onDownload={handleDownload} 
        />
      </div>
    </AppLayout>
  );
}
