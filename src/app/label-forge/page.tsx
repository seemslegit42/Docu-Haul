
"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { LabelForgeSchema, type LabelForgeInput } from '@/lib/schemas';
import { createCompliantVinLabel, type CreateCompliantVinLabelOutput } from '@/ai/flows/create-compliant-vin-label';
import { AppLayout } from '@/components/layout/app-layout';
import { PageHeader } from '@/components/layout/page-header';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';
import { PaywallPrompt } from '@/components/layout/PaywallPrompt';
import { Skeleton } from '@/components/ui/skeleton';
import LabelForgeForm from './components/LabelForgeForm';
import GeneratedLabel from './components/GeneratedLabel';

export default function LabelForgePage() {
  const [generatedLabel, setGeneratedLabel] = useState<CreateCompliantVinLabelOutput | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();
  const { isPremium, isLoading: isAuthLoading } = useAuth();

  const form = useForm<LabelForgeInput>({
    resolver: zodResolver(LabelForgeSchema),
    defaultValues: {
      vinData: '',
      trailerSpecs: '',
      regulatoryStandards: '',
      labelDimensions: '',
    },
  });

  const onSubmit = async (data: LabelForgeInput) => {
    setIsGenerating(true);
    setGeneratedLabel(null);
    try {
      const result = await createCompliantVinLabel(data);
      setGeneratedLabel(result);
      toast({
        title: "Label Generated Successfully",
        description: "The VIN label has been designed and generated by AI.",
      });
    } catch (error) {
      console.error("Error generating label:", error);
      const errorMessage = error instanceof Error ? error.message : "An unexpected error occurred.";
      toast({
        title: "Error Generating Label",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownload = () => {
    if (!generatedLabel || !generatedLabel.labelDataUri) return;

    const link = document.createElement('a');
    link.href = generatedLabel.labelDataUri;

    // Use a regex to extract the file extension from the data URI mime type
    const match = generatedLabel.labelDataUri.match(/data:image\/([\w+]+);/);
    const mimeType = match ? match[1] : 'png';
    const extension = mimeType.split('+')[0]; // Handles cases like 'svg+xml' -> 'svg'
    
    link.download = `vin_label_${form.getValues('vinData') || 'generated'}.${extension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "Download Started", description: `Label ${link.download} download initiated.` });
  };

  const renderContent = () => {
    if (isAuthLoading) {
      return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Skeleton className="h-[500px] w-full" />
          <Skeleton className="h-[500px] w-full" />
        </div>
      );
    }

    if (!isPremium) {
        return <PaywallPrompt />;
    }

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <LabelForgeForm form={form} onSubmit={onSubmit} isLoading={isGenerating} />
            <GeneratedLabel 
                generatedLabel={generatedLabel} 
                isLoading={isGenerating} 
                onDownload={handleDownload} 
            />
        </div>
    );
  }

  return (
    <AppLayout>
      <PageHeader 
        title="Label Forge"
        description="AI-powered VIN label creation with optimized information placement."
      />
      {renderContent()}
    </AppLayout>
  );
}
